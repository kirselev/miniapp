{"ast":null,"code":"'use strict';\n\nvar versions = ['2.5', 'x', '2', '1'];\nvar layers = ['x', '3', '2', '1'];\nvar bitRates = {\n  'V1Lx': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  'V1L1': [0, 32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448],\n  'V1L2': [0, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384],\n  'V1L3': [0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320],\n  'V2Lx': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  'V2L1': [0, 32, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224, 256],\n  'V2L2': [0, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160],\n  'V2L3': [0, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160],\n  'VxLx': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  'VxL1': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  'VxL2': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  'VxL3': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n};\nvar sampleRates = {\n  'x': [0, 0, 0],\n  '1': [44100, 48000, 32000],\n  '2': [22050, 24000, 16000],\n  '2.5': [11025, 12000, 8000]\n};\nvar samples = {\n  x: {\n    x: 0,\n    1: 0,\n    2: 0,\n    3: 0\n  },\n  1: {\n    // MPEGv1,    Layers 1, 2, 3\n    x: 0,\n    1: 384,\n    2: 1152,\n    3: 1152\n  },\n  2: {\n    // MPEGv2/2.5, Layers 1, 2, 3\n    x: 0,\n    1: 384,\n    2: 1152,\n    3: 576\n  }\n};\n\nmodule.exports = function (buffer) {\n  var scratch = Buffer.alloc(100);\n  var bytesRead = buffer.copy(scratch, 0, 0, 100);\n  if (bytesRead < 100) return 0;\n  var offset = skipID3(scratch);\n  var duration = 0;\n\n  while (offset < buffer.length) {\n    var _bytesRead = buffer.copy(scratch, 0, offset, offset + 10);\n\n    if (_bytesRead < 10) return round(duration); // looking for 1111 1111 111 (frame synchronization bits)\n\n    if (scratch[0] === 0xff && (scratch[1] & 0xe0) === 0xe0) {\n      var header = parseFrameHeader(scratch);\n\n      if (header.frameSize && header.samples) {\n        offset += header.frameSize;\n        duration += header.samples / header.sampleRate;\n      } else {\n        offset++; // corrupt file?\n      }\n    } else if (scratch[0] === 0x54 && scratch[1] === 0x41 && scratch[2] === 0x47) {\n      // TAG\n      offset += 128; // skip over id3v1 tag size\n    } else {\n      offset++; // corrupt file?\n    }\n  }\n\n  return round(duration);\n};\n\nfunction skipID3(buffer) {\n  // http://id3.org/d3v2.3.0\n  if (buffer[0] === 0x49 && buffer[1] === 0x44 && buffer[2] === 0x33) {\n    // ID3\n    var id3v2Flags = buffer[5];\n    var footerSize = id3v2Flags & 0x10 ? 10 : 0; // ID3 size encoding is crazy (7 bits in each of 4 bytes)\n\n    var z0 = buffer[6];\n    var z1 = buffer[7];\n    var z2 = buffer[8];\n    var z3 = buffer[9];\n\n    if ((z0 & 0x80) === 0 && (z1 & 0x80) === 0 && (z2 & 0x80) === 0 && (z3 & 0x80) === 0) {\n      var tagSize = (z0 & 0x7f) * 2097152 + (z1 & 0x7f) * 16384 + (z2 & 0x7f) * 128 + (z3 & 0x7f);\n      return 10 + tagSize + footerSize;\n    }\n  }\n\n  return 0;\n}\n\nfunction frameSize(samples, layer, bitRate, sampleRate, paddingBit) {\n  if (layer === 1) {\n    return samples * bitRate * 125 / sampleRate + paddingBit * 4 | 0;\n  } else {\n    // layer 2, 3\n    return samples * bitRate * 125 / sampleRate + paddingBit | 0;\n  }\n}\n\nfunction parseFrameHeader(header) {\n  var b1 = header[1];\n  var b2 = header[2];\n  var versionBits = (b1 & 0x18) >> 3;\n  var version = versions[versionBits];\n  var simpleVersion = version === '2.5' ? 2 : version;\n  var layerBits = (b1 & 0x06) >> 1;\n  var layer = layers[layerBits];\n  var bitRateKey = 'V' + simpleVersion + 'L' + layer;\n  var bitRateIndex = (b2 & 0xf0) >> 4;\n  var bitRate = bitRates[bitRateKey][bitRateIndex] || 0;\n  var sampleRateIdx = (b2 & 0x0c) >> 2;\n  var sampleRate = sampleRates[version][sampleRateIdx] || 0;\n  var sample = samples[simpleVersion][layer];\n  var paddingBit = (b2 & 0x02) >> 1;\n  return {\n    bitRate: bitRate,\n    sampleRate: sampleRate,\n    frameSize: frameSize(sample, layer, bitRate, sampleRate, paddingBit),\n    samples: sample\n  };\n}\n\nfunction round(duration) {\n  return Math.round(duration * 1000); // round to nearest ms\n}","map":null,"metadata":{},"sourceType":"script"}